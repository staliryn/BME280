
BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a9c  08003a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a9c  08003a9c  00013a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08003ab0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08003ab0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097c7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001826  00000000  00000000  00029803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b47  00000000  00000000  0002c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae69  00000000  00000000  00050d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1759  00000000  00000000  0005bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  0013d384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a44 	.word	0x08003a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a44 	.word	0x08003a44

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <bme280_temp>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float bme280_temp(I2C_HandleTypeDef *hi2c, uint16_t devAdress){
 8000a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a08:	b096      	sub	sp, #88	; 0x58
 8000a0a:	af02      	add	r7, sp, #8
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	807b      	strh	r3, [r7, #2]

	int32_t dig_sample,adc_T;
	int16_t dig_t2,dig_t3;
	uint16_t dig_t1;

	uint8_t temperature_data1[] = {0x88,0x89},
 8000a12:	f648 1388 	movw	r3, #35208	; 0x8988
 8000a16:	853b      	strh	r3, [r7, #40]	; 0x28
		  temperature_data2[] = {0x8A,0x8B},
 8000a18:	f648 338a 	movw	r3, #35722	; 0x8b8a
 8000a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		  temperature_data3[] = {0x8C,0x8D},
 8000a1e:	f648 538c 	movw	r3, #36236	; 0x8d8c
 8000a22:	843b      	strh	r3, [r7, #32]

		  temperature_stored1[2],
		  temperature_stored2[2],
		  temperature_stored3[2],

		  sample_temperature_data[] = {0xFA},
 8000a24:	23fa      	movs	r3, #250	; 0xfa
 8000a26:	743b      	strb	r3, [r7, #16]
		  temperature_stored_sample[3];

	HAL_I2C_Master_Transmit(hi2c,devAdress,sample_temperature_data,1,100);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	8879      	ldrh	r1, [r7, #2]
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 feef 	bl	8001818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c,devAdress,&temperature_stored_sample,3,100);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	8879      	ldrh	r1, [r7, #2]
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2303      	movs	r3, #3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 ffda 	bl	8001a00 <HAL_I2C_Master_Receive>

	HAL_I2C_Master_Transmit(hi2c, devAdress, temperature_data1, 1, 100);
 8000a4c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a50:	8879      	ldrh	r1, [r7, #2]
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 fedd 	bl	8001818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, devAdress, &temperature_stored1, 2, 100);
 8000a5e:	f107 021c 	add.w	r2, r7, #28
 8000a62:	8879      	ldrh	r1, [r7, #2]
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2302      	movs	r3, #2
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 ffc8 	bl	8001a00 <HAL_I2C_Master_Receive>

	HAL_I2C_Master_Transmit(hi2c, devAdress, temperature_data2, 1, 100);
 8000a70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a74:	8879      	ldrh	r1, [r7, #2]
 8000a76:	2364      	movs	r3, #100	; 0x64
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 fecb 	bl	8001818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, devAdress, &temperature_stored2, 2, 100);
 8000a82:	f107 0218 	add.w	r2, r7, #24
 8000a86:	8879      	ldrh	r1, [r7, #2]
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 ffb6 	bl	8001a00 <HAL_I2C_Master_Receive>

	HAL_I2C_Master_Transmit(hi2c, devAdress, temperature_data3, 1, 100);
 8000a94:	f107 0220 	add.w	r2, r7, #32
 8000a98:	8879      	ldrh	r1, [r7, #2]
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 feb9 	bl	8001818 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, devAdress, &temperature_stored3, 2, 100);
 8000aa6:	f107 0214 	add.w	r2, r7, #20
 8000aaa:	8879      	ldrh	r1, [r7, #2]
 8000aac:	2364      	movs	r3, #100	; 0x64
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 ffa4 	bl	8001a00 <HAL_I2C_Master_Receive>


	dig_t1 = temperature_stored1[1];
 8000ab8:	7f7b      	ldrb	r3, [r7, #29]
 8000aba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	dig_t1 = (dig_t1 << 8) + temperature_stored1[0];
 8000abe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	7f3b      	ldrb	r3, [r7, #28]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4413      	add	r3, r2
 8000acc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	dig_t2 = temperature_stored2[1];
 8000ad0:	7e7b      	ldrb	r3, [r7, #25]
 8000ad2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	dig_t2 = (dig_t2 << 8) + temperature_stored2[0];
 8000ad6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	7e3b      	ldrb	r3, [r7, #24]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	dig_t3 = temperature_stored3[1];
 8000aea:	7d7b      	ldrb	r3, [r7, #21]
 8000aec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	dig_t3 = (dig_t3 << 8) + temperature_stored3[0];
 8000af0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	7d3b      	ldrb	r3, [r7, #20]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	4413      	add	r3, r2
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a


	dig_sample = temperature_stored_sample[0];
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	647b      	str	r3, [r7, #68]	; 0x44
	dig_sample = (dig_sample << 12);
 8000b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b0a:	031b      	lsls	r3, r3, #12
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
	dig_sample += (temperature_stored_sample[1] << 4);
 8000b0e:	7b7b      	ldrb	r3, [r7, #13]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b14:	4413      	add	r3, r2
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
	dig_sample += temperature_stored_sample[0];
 8000b18:	7b3b      	ldrb	r3, [r7, #12]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b1e:	4413      	add	r3, r2
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44

	adc_T = dig_sample;
 8000b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b24:	643b      	str	r3, [r7, #64]	; 0x40

	var1  = (((double)adc_T)/16384.0 - ((double)dig_t1)/1024.0) * ((double)dig_t2);
 8000b26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b28:	f7ff fca0 	bl	800046c <__aeabi_i2d>
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <bme280_temp+0x270>)
 8000b32:	f7ff fe2f 	bl	8000794 <__aeabi_ddiv>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4614      	mov	r4, r2
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc82 	bl	800044c <__aeabi_ui2d>
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <bme280_temp+0x274>)
 8000b4e:	f7ff fe21 	bl	8000794 <__aeabi_ddiv>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	4620      	mov	r0, r4
 8000b58:	4629      	mov	r1, r5
 8000b5a:	f7ff fb39 	bl	80001d0 <__aeabi_dsub>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	4614      	mov	r4, r2
 8000b64:	461d      	mov	r5, r3
 8000b66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc7e 	bl	800046c <__aeabi_i2d>
 8000b70:	4602      	mov	r2, r0
 8000b72:	460b      	mov	r3, r1
 8000b74:	4620      	mov	r0, r4
 8000b76:	4629      	mov	r1, r5
 8000b78:	f7ff fce2 	bl	8000540 <__aeabi_dmul>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2  = ((((double)adc_T)/131072.0 - ((double)dig_t1)/8192.0) * (((double)adc_T)/131072.0 - ((double) dig_t1)/8192.0)) * ((double)dig_t3);
 8000b84:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000b86:	f7ff fc71 	bl	800046c <__aeabi_i2d>
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000b92:	f7ff fdff 	bl	8000794 <__aeabi_ddiv>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4614      	mov	r4, r2
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc52 	bl	800044c <__aeabi_ui2d>
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <bme280_temp+0x278>)
 8000bae:	f7ff fdf1 	bl	8000794 <__aeabi_ddiv>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	4629      	mov	r1, r5
 8000bba:	f7ff fb09 	bl	80001d0 <__aeabi_dsub>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000bc8:	f7ff fc50 	bl	800046c <__aeabi_i2d>
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000bd4:	f7ff fdde 	bl	8000794 <__aeabi_ddiv>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4690      	mov	r8, r2
 8000bde:	4699      	mov	r9, r3
 8000be0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fc31 	bl	800044c <__aeabi_ui2d>
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <bme280_temp+0x278>)
 8000bf0:	f7ff fdd0 	bl	8000794 <__aeabi_ddiv>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4640      	mov	r0, r8
 8000bfa:	4649      	mov	r1, r9
 8000bfc:	f7ff fae8 	bl	80001d0 <__aeabi_dsub>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4620      	mov	r0, r4
 8000c06:	4629      	mov	r1, r5
 8000c08:	f7ff fc9a 	bl	8000540 <__aeabi_dmul>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4614      	mov	r4, r2
 8000c12:	461d      	mov	r5, r3
 8000c14:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc27 	bl	800046c <__aeabi_i2d>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	4620      	mov	r0, r4
 8000c24:	4629      	mov	r1, r5
 8000c26:	f7ff fc8b 	bl	8000540 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temperature = (var1 + var2) / 5120;
 8000c32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000c36:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000c3a:	f7ff facb 	bl	80001d4 <__adddf3>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <bme280_temp+0x27c>)
 8000c4c:	f7ff fda2 	bl	8000794 <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f7ff fe84 	bl	8000964 <__aeabi_d2f>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	return temperature;
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	ee07 3a90 	vmov	s15, r3

}
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c72:	bf00      	nop
 8000c74:	40d00000 	.word	0x40d00000
 8000c78:	40900000 	.word	0x40900000
 8000c7c:	40c00000 	.word	0x40c00000
 8000c80:	40b40000 	.word	0x40b40000

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 f9ed 	bl	8001068 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f82d 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c92:	f000 f8bd 	bl	8000e10 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c96:	f000 f87b 	bl	8000d90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	  uint8_t bme280F4config[] = {0xF4,0b00100011};
 8000c9a:	f242 33f4 	movw	r3, #9204	; 0x23f4
 8000c9e:	803b      	strh	r3, [r7, #0]
	  float temp;

	  if(HAL_I2C_IsDeviceReady(&hi2c1, 0xEC, 2, 30) == HAL_OK){
 8000ca0:	231e      	movs	r3, #30
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	21ec      	movs	r1, #236	; 0xec
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <main+0x64>)
 8000ca8:	f000 ffa0 	bl	8001bec <HAL_I2C_IsDeviceReady>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d108      	bne.n	8000cc4 <main+0x40>
		  HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 fd05 	bl	80016c8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f000 fa4e 	bl	8001160 <HAL_Delay>
	  }

	  HAL_I2C_Master_Transmit(&hi2c1, 0xEC, bme280F4config, 2, 100);
 8000cc4:	463a      	mov	r2, r7
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2302      	movs	r3, #2
 8000ccc:	21ec      	movs	r1, #236	; 0xec
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <main+0x64>)
 8000cd0:	f000 fda2 	bl	8001818 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp = bme280_temp(&hi2c1,0xEC);
 8000cd4:	21ec      	movs	r1, #236	; 0xec
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <main+0x64>)
 8000cd8:	f7ff fe94 	bl	8000a04 <bme280_temp>
 8000cdc:	ed87 0a01 	vstr	s0, [r7, #4]
	  	  HAL_Delay(150);
 8000ce0:	2096      	movs	r0, #150	; 0x96
 8000ce2:	f000 fa3d 	bl	8001160 <HAL_Delay>
	  temp = bme280_temp(&hi2c1,0xEC);
 8000ce6:	e7f5      	b.n	8000cd4 <main+0x50>
 8000ce8:	20000028 	.word	0x20000028

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b096      	sub	sp, #88	; 0x58
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2244      	movs	r2, #68	; 0x44
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fe9a 	bl	8003a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d12:	f001 fb91 	bl	8002438 <HAL_PWREx_ControlVoltageScaling>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d1c:	f000 f8b6 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d20:	2302      	movs	r3, #2
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d32:	2302      	movs	r3, #2
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fbc8 	bl	80024e4 <HAL_RCC_OscConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d5a:	f000 f897 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d62:	2303      	movs	r3, #3
 8000d64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	2104      	movs	r1, #4
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 ff90 	bl	8002c9c <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d82:	f000 f883 	bl	8000e8c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3758      	adds	r7, #88	; 0x58
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <MX_I2C1_Init+0x78>)
 8000d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <MX_I2C1_Init+0x7c>)
 8000d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dca:	480e      	ldr	r0, [pc, #56]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dcc:	f000 fc94 	bl	80016f8 <HAL_I2C_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dd6:	f000 f859 	bl	8000e8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000dde:	f001 fa85 	bl	80022ec <HAL_I2CEx_ConfigAnalogFilter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000de8:	f000 f850 	bl	8000e8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dec:	2100      	movs	r1, #0
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_I2C1_Init+0x74>)
 8000df0:	f001 fac7 	bl	8002382 <HAL_I2CEx_ConfigDigitalFilter>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dfa:	f000 f847 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000028 	.word	0x20000028
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	10909cec 	.word	0x10909cec

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_GPIO_Init+0x78>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f000 fc33 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e62:	2320      	movs	r3, #32
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 fa7a 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ac      	sub	sp, #176	; 0xb0
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2288      	movs	r2, #136	; 0x88
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fd97 	bl	8003a34 <memset>
  if(hi2c->Instance==I2C1)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <HAL_I2C_MspInit+0xb0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d13b      	bne.n	8000f88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 f8a9 	bl	8003074 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f28:	f7ff ffb0 	bl	8000e8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <HAL_I2C_MspInit+0xb8>)
 8000f6c:	f000 fa02 	bl	8001374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_I2C_MspInit+0xb4>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	37b0      	adds	r7, #176	; 0xb0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f89a 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 fcd3 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fe1d 	bl	8000c84 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800104c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001058:	08003aa4 	.word	0x08003aa4
  ldr r2, =_sbss
 800105c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001060:	20000080 	.word	0x20000080

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_Init+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_Init+0x3c>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f944 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f80f 	bl	80010a8 <HAL_InitTick>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	e001      	b.n	800109a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001096:	f7ff feff 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109a:	79fb      	ldrb	r3, [r7, #7]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d023      	beq.n	8001104 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_InitTick+0x70>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f941 	bl	800135a <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f919 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_InitTick+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e007      	b.n	8001108 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e004      	b.n	8001108 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e001      	b.n	8001108 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	2000007c 	.word	0x2000007c

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000007c 	.word	0x2000007c

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff47 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5c 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb0 	bl	80012c8 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e17f      	b.n	8001684 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8171 	beq.w	800167e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <HAL_GPIO_Init+0x40>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d130      	bne.n	8001416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f003 0201 	and.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b03      	cmp	r3, #3
 8001420:	d118      	bne.n	8001454 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ac 	beq.w	800167e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x330>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_GPIO_Init+0x330>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	; 0x60
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_GPIO_Init+0x330>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153e:	4a5a      	ldr	r2, [pc, #360]	; (80016a8 <HAL_GPIO_Init+0x334>)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001568:	d025      	beq.n	80015b6 <HAL_GPIO_Init+0x242>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	; (80016ac <HAL_GPIO_Init+0x338>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x23e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	; (80016b0 <HAL_GPIO_Init+0x33c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x23a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4d      	ldr	r2, [pc, #308]	; (80016b4 <HAL_GPIO_Init+0x340>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x236>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x344>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x232>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <HAL_GPIO_Init+0x348>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x22e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4a      	ldr	r2, [pc, #296]	; (80016c0 <HAL_GPIO_Init+0x34c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x22a>
 800159a:	2306      	movs	r3, #6
 800159c:	e00c      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00a      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x244>
 80015b6:	2300      	movs	r3, #0
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015c8:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x334>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_GPIO_Init+0x350>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015fa:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <HAL_GPIO_Init+0x350>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_GPIO_Init+0x350>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001624:	4a27      	ldr	r2, [pc, #156]	; (80016c4 <HAL_GPIO_Init+0x350>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_GPIO_Init+0x350>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_GPIO_Init+0x350>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_GPIO_Init+0x350>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001678:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_GPIO_Init+0x350>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f47f ae78 	bne.w	8001384 <HAL_GPIO_Init+0x10>
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	48001400 	.word	0x48001400
 80016c0:	48001800 	.word	0x48001800
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e081      	b.n	800180e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fbde 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2224      	movs	r2, #36	; 0x24
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001748:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001758:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	e006      	b.n	8001780 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800177e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d104      	bne.n	8001792 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	430a      	orrs	r2, r1
 80017ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69d9      	ldr	r1, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1a      	ldr	r2, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af02      	add	r7, sp, #8
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	461a      	mov	r2, r3
 8001824:	460b      	mov	r3, r1
 8001826:	817b      	strh	r3, [r7, #10]
 8001828:	4613      	mov	r3, r2
 800182a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	f040 80da 	bne.w	80019ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_I2C_Master_Transmit+0x30>
 8001844:	2302      	movs	r3, #2
 8001846:	e0d3      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001850:	f7ff fc7a 	bl	8001148 <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2319      	movs	r3, #25
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 faed 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e0be      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2221      	movs	r2, #33	; 0x21
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2210      	movs	r2, #16
 800187e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	893a      	ldrh	r2, [r7, #8]
 8001892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2bff      	cmp	r3, #255	; 0xff
 80018a2:	d90e      	bls.n	80018c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	8979      	ldrh	r1, [r7, #10]
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fce4 	bl	8002288 <I2C_TransferConfig>
 80018c0:	e06c      	b.n	800199c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	8979      	ldrh	r1, [r7, #10]
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 fcd3 	bl	8002288 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018e2:	e05b      	b.n	800199c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	6a39      	ldr	r1, [r7, #32]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 faea 	bl	8001ec2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e07b      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d034      	beq.n	800199c <HAL_I2C_Master_Transmit+0x184>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	2b00      	cmp	r3, #0
 8001938:	d130      	bne.n	800199c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	2200      	movs	r2, #0
 8001942:	2180      	movs	r1, #128	; 0x80
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fa7c 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e04d      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29b      	uxth	r3, r3
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d90e      	bls.n	800197c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	22ff      	movs	r2, #255	; 0xff
 8001962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	b2da      	uxtb	r2, r3
 800196a:	8979      	ldrh	r1, [r7, #10]
 800196c:	2300      	movs	r3, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fc87 	bl	8002288 <I2C_TransferConfig>
 800197a:	e00f      	b.n	800199c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	b2da      	uxtb	r2, r3
 800198c:	8979      	ldrh	r1, [r7, #10]
 800198e:	2300      	movs	r3, #0
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fc76 	bl	8002288 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d19e      	bne.n	80018e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fac9 	bl	8001f42 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e01a      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2220      	movs	r2, #32
 80019c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_I2C_Master_Transmit+0x1e4>)
 80019ce:	400b      	ands	r3, r1
 80019d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
  }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	80002000 	.word	0x80002000
 80019fc:	fe00e800 	.word	0xfe00e800

08001a00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	817b      	strh	r3, [r7, #10]
 8001a10:	4613      	mov	r3, r2
 8001a12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	f040 80db 	bne.w	8001bd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_I2C_Master_Receive+0x30>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0d4      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a38:	f7ff fb86 	bl	8001148 <HAL_GetTick>
 8001a3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2319      	movs	r3, #25
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f9f9 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0bf      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2222      	movs	r2, #34	; 0x22
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2210      	movs	r2, #16
 8001a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	893a      	ldrh	r2, [r7, #8]
 8001a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d90e      	bls.n	8001aaa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	22ff      	movs	r2, #255	; 0xff
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_I2C_Master_Receive+0x1e4>)
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fbf0 	bl	8002288 <I2C_TransferConfig>
 8001aa8:	e06d      	b.n	8001b86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	8979      	ldrh	r1, [r7, #10]
 8001abc:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <HAL_I2C_Master_Receive+0x1e4>)
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fbdf 	bl	8002288 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001aca:	e05c      	b.n	8001b86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	6a39      	ldr	r1, [r7, #32]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fa73 	bl	8001fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e07c      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d034      	beq.n	8001b86 <HAL_I2C_Master_Receive+0x186>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d130      	bne.n	8001b86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 f987 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e04d      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2bff      	cmp	r3, #255	; 0xff
 8001b46:	d90e      	bls.n	8001b66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	22ff      	movs	r2, #255	; 0xff
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	8979      	ldrh	r1, [r7, #10]
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fb92 	bl	8002288 <I2C_TransferConfig>
 8001b64:	e00f      	b.n	8001b86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8979      	ldrh	r1, [r7, #10]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 fb81 	bl	8002288 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d19d      	bne.n	8001acc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	6a39      	ldr	r1, [r7, #32]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f9d4 	bl	8001f42 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e01a      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_I2C_Master_Receive+0x1e8>)
 8001bb8:	400b      	ands	r3, r1
 8001bba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	80002400 	.word	0x80002400
 8001be8:	fe00e800 	.word	0xfe00e800

08001bec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	f040 80f1 	bne.w	8001df0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0e7      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2C_IsDeviceReady+0x44>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e0e0      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_IsDeviceReady+0x72>
 8001c4e:	897b      	ldrh	r3, [r7, #10]
 8001c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c5c:	e004      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x7c>
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c64:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fa6b 	bl	8001148 <HAL_GetTick>
 8001c72:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ca0:	e034      	b.n	8001d0c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d01a      	beq.n	8001ce0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001caa:	f7ff fa4d 	bl	8001148 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d302      	bcc.n	8001cc0 <HAL_I2C_IsDeviceReady+0xd4>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e088      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	bf0c      	ite	eq
 8001d04:	2301      	moveq	r3, #1
 8001d06:	2300      	movne	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_I2C_IsDeviceReady+0x12c>
 8001d12:	7fbb      	ldrb	r3, [r7, #30]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0c4      	beq.n	8001ca2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d01a      	beq.n	8001d5c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2120      	movs	r1, #32
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f886 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e058      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e04a      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	2120      	movs	r1, #32
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f86b 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e03d      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2220      	movs	r2, #32
 8001d84:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d118      	bne.n	8001dc0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d9c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f84a 	bl	8001e42 <I2C_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e01c      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	f63f af3b 	bhi.w	8001c46 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d103      	bne.n	8001e18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2200      	movs	r2, #0
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d007      	beq.n	8001e36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	619a      	str	r2, [r3, #24]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	e022      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d01e      	beq.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5c:	f7ff f974 	bl	8001148 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d302      	bcc.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2301      	moveq	r3, #1
 8001eac:	2300      	movne	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d0cd      	beq.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ece:	e02c      	b.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f8eb 	bl	80020b0 <I2C_IsErrorOccurred>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e02a      	b.n	8001f3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d01e      	beq.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7ff f92c 	bl	8001148 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d302      	bcc.n	8001f02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d113      	bne.n	8001f2a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0220 	orr.w	r2, r3, #32
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e007      	b.n	8001f3a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d1cb      	bne.n	8001ed0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4e:	e028      	b.n	8001fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f000 f8ab 	bl	80020b0 <I2C_IsErrorOccurred>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e026      	b.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f64:	f7ff f8f0 	bl	8001148 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d302      	bcc.n	8001f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e007      	b.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0320 	and.w	r3, r3, #32
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d1cf      	bne.n	8001f50 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fc8:	e064      	b.n	8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f86e 	bl	80020b0 <I2C_IsErrorOccurred>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e062      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d138      	bne.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d105      	bne.n	8002006 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e04e      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b10      	cmp	r3, #16
 8002012:	d107      	bne.n	8002024 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2204      	movs	r2, #4
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
 8002022:	e002      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2220      	movs	r2, #32
 8002030:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800203e:	400b      	ands	r3, r1
 8002040:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e022      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f873 	bl	8001148 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10f      	bne.n	8002094 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d193      	bne.n	8001fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	fe00e800 	.word	0xfe00e800

080020b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d075      	beq.n	80021c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2210      	movs	r2, #16
 80020e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020e4:	e056      	b.n	8002194 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d052      	beq.n	8002194 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff f82b 	bl	8001148 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_IsErrorOccurred+0x54>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d147      	bne.n	8002194 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002126:	d12e      	bne.n	8002186 <I2C_IsErrorOccurred+0xd6>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800212e:	d02a      	beq.n	8002186 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b20      	cmp	r3, #32
 8002134:	d027      	beq.n	8002186 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002146:	f7fe ffff 	bl	8001148 <HAL_GetTick>
 800214a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214c:	e01b      	b.n	8002186 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800214e:	f7fe fffb 	bl	8001148 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b19      	cmp	r3, #25
 800215a:	d914      	bls.n	8002186 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d1dc      	bne.n	800214e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d003      	beq.n	80021aa <I2C_IsErrorOccurred+0xfa>
 80021a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d09d      	beq.n	80020e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2220      	movs	r2, #32
 80021b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00b      	beq.n	8002214 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01c      	beq.n	8002278 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fddb 	bl	8001dfa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <I2C_IsErrorOccurred+0x1d4>)
 8002250:	400b      	ands	r3, r1
 8002252:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800227c:	4618      	mov	r0, r3
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fe00e800 	.word	0xfe00e800

08002288 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	817b      	strh	r3, [r7, #10]
 8002296:	4613      	mov	r3, r2
 8002298:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022a0:	7a7b      	ldrb	r3, [r7, #9]
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <I2C_TransferConfig+0x60>)
 80022c8:	430b      	orrs	r3, r1
 80022ca:	43db      	mvns	r3, r3
 80022cc:	ea02 0103 	and.w	r1, r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	03ff63ff 	.word	0x03ff63ff

080022ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	d138      	bne.n	8002374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800230c:	2302      	movs	r3, #2
 800230e:	e032      	b.n	8002376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800233e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d139      	bne.n	800240c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e033      	b.n	800240e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2224      	movs	r2, #36	; 0x24
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_PWREx_GetVoltageRange+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002446:	d130      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d038      	beq.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2232      	movs	r2, #50	; 0x32
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0c9b      	lsrs	r3, r3, #18
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800247c:	e002      	b.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3b01      	subs	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	d102      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f2      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a4:	d110      	bne.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e00f      	b.n	80024ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	d007      	beq.n	80024c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000
 80024dc:	20000000 	.word	0x20000000
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e3ca      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b97      	ldr	r3, [pc, #604]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b94      	ldr	r3, [pc, #592]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80e4 	beq.w	80026e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_RCC_OscConfig+0x4a>
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	f040 808b 	bne.w	800263c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b01      	cmp	r3, #1
 800252a:	f040 8087 	bne.w	800263c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e3a2      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1a      	ldr	r2, [r3, #32]
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d004      	beq.n	8002560 <HAL_RCC_OscConfig+0x7c>
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255e:	e005      	b.n	800256c <HAL_RCC_OscConfig+0x88>
 8002560:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256c:	4293      	cmp	r3, r2
 800256e:	d223      	bcs.n	80025b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fd1d 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e383      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a72      	ldr	r2, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800258a:	f043 0308 	orr.w	r3, r3, #8
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	496d      	ldr	r1, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	4968      	ldr	r1, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
 80025b6:	e025      	b.n	8002604 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b8:	4b66      	ldr	r3, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025be:	f043 0308 	orr.w	r3, r3, #8
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4960      	ldr	r1, [pc, #384]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	495b      	ldr	r1, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fcdd 	bl	8002fb4 <RCC_SetFlashLatencyFromMSIRange>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e343      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002604:	f000 fc4a 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	4950      	ldr	r1, [pc, #320]	; (8002758 <HAL_RCC_OscConfig+0x274>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	4a4e      	ldr	r2, [pc, #312]	; (800275c <HAL_RCC_OscConfig+0x278>)
 8002622:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <HAL_RCC_OscConfig+0x27c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fd3d 	bl	80010a8 <HAL_InitTick>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d052      	beq.n	80026de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	e327      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d032      	beq.n	80026aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a42      	ldr	r2, [pc, #264]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002650:	f7fe fd7a 	bl	8001148 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002658:	f7fe fd76 	bl	8001148 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e310      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a36      	ldr	r2, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800267c:	f043 0308 	orr.w	r3, r3, #8
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4931      	ldr	r1, [pc, #196]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	492c      	ldr	r1, [pc, #176]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	e01a      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b6:	f7fe fd47 	bl	8001148 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026be:	f7fe fd43 	bl	8001148 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e2dd      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x1da>
 80026dc:	e000      	b.n	80026e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d074      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x21a>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d10e      	bne.n	8002716 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d10b      	bne.n	8002716 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d064      	beq.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d160      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e2ba      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271e:	d106      	bne.n	800272e <HAL_RCC_OscConfig+0x24a>
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	e026      	b.n	800277c <HAL_RCC_OscConfig+0x298>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002736:	d115      	bne.n	8002764 <HAL_RCC_OscConfig+0x280>
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800273e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a02      	ldr	r2, [pc, #8]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800274a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x298>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	08003a5c 	.word	0x08003a5c
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004
 8002764:	4ba0      	ldr	r3, [pc, #640]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a9f      	ldr	r2, [pc, #636]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b9d      	ldr	r3, [pc, #628]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a9c      	ldr	r2, [pc, #624]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fce0 	bl	8001148 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fcdc 	bl	8001148 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e276      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x2a8>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fccc 	bl	8001148 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fcc8 	bl	8001148 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e262      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2d0>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d060      	beq.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_OscConfig+0x310>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d119      	bne.n	8002822 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d116      	bne.n	8002822 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_OscConfig+0x328>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e23f      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	4973      	ldr	r1, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	e040      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d023      	beq.n	8002872 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282a:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fc87 	bl	8001148 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283e:	f7fe fc83 	bl	8001148 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e21d      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002850:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285c:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	495f      	ldr	r1, [pc, #380]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e018      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002872:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fc63 	bl	8001148 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fc5f 	bl	8001148 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1f9      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d03c      	beq.n	800292a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028be:	4a4a      	ldr	r2, [pc, #296]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fc3e 	bl	8001148 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d0:	f7fe fc3a 	bl	8001148 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1d4      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3ec>
 80028f0:	e01b      	b.n	800292a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe fc21 	bl	8001148 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe fc1d 	bl	8001148 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1b7      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ef      	bne.n	800290a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80a6 	beq.w	8002a84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10d      	bne.n	8002964 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002952:	6593      	str	r3, [r2, #88]	; 0x58
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d118      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297c:	f7fe fbe4 	bl	8001148 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fe fbe0 	bl	8001148 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e17a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x508>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d8>
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ba:	e029      	b.n	8002a10 <HAL_RCC_OscConfig+0x52c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d115      	bne.n	80029f0 <HAL_RCC_OscConfig+0x50c>
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x52c>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40007000 	.word	0x40007000
 80029f0:	4b9c      	ldr	r3, [pc, #624]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f6:	4a9b      	ldr	r2, [pc, #620]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a00:	4b98      	ldr	r3, [pc, #608]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	4a97      	ldr	r2, [pc, #604]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fb96 	bl	8001148 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fb92 	bl	8001148 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e12a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ed      	beq.n	8002a20 <HAL_RCC_OscConfig+0x53c>
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fb7f 	bl	8001148 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fb7b 	bl	8001148 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e113      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	4b7f      	ldr	r3, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ed      	bne.n	8002a4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a79      	ldr	r2, [pc, #484]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80fe 	beq.w	8002c8a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f040 80d0 	bne.w	8002c38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a98:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d130      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d127      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d11f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ad8:	2a07      	cmp	r2, #7
 8002ada:	bf14      	ite	ne
 8002adc:	2201      	movne	r2, #1
 8002ade:	2200      	moveq	r2, #0
 8002ae0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d113      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	3b01      	subs	r3, #1
 8002af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	085b      	lsrs	r3, r3, #1
 8002b06:	3b01      	subs	r3, #1
 8002b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d06e      	beq.n	8002bec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d069      	beq.n	8002be8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b20:	4b50      	ldr	r3, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0ad      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7fe fb04 	bl	8001148 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fb00 	bl	8001148 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e09a      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b56:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b62:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <HAL_RCC_OscConfig+0x784>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b72:	3a01      	subs	r2, #1
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b7c:	0212      	lsls	r2, r2, #8
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b84:	0852      	lsrs	r2, r2, #1
 8002b86:	3a01      	subs	r2, #1
 8002b88:	0552      	lsls	r2, r2, #21
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0652      	lsls	r2, r2, #25
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b9c:	0912      	lsrs	r2, r2, #4
 8002b9e:	0452      	lsls	r2, r2, #17
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4930      	ldr	r1, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb4:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a2a      	ldr	r2, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc0:	f7fe fac2 	bl	8001148 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fabe 	bl	8001148 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e058      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be6:	e050      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e04f      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d148      	bne.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c10:	f7fe fa9a 	bl	8001148 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fa96 	bl	8001148 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e030      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x734>
 8002c36:	e028      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d023      	beq.n	8002c86 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCC_OscConfig+0x780>)
 8002c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fa7d 	bl	8001148 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c50:	e00c      	b.n	8002c6c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fa79 	bl	8001148 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d905      	bls.n	8002c6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ec      	bne.n	8002c52 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4905      	ldr	r1, [pc, #20]	; (8002c94 <HAL_RCC_OscConfig+0x7b0>)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x7b4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
 8002c84:	e001      	b.n	8002c8a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	feeefffc 	.word	0xfeeefffc

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0e7      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b72      	ldr	r3, [pc, #456]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0207 	bic.w	r2, r3, #7
 8002cc6:	4970      	ldr	r1, [pc, #448]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cf      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d908      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4960      	ldr	r1, [pc, #384]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04c      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	4b5a      	ldr	r3, [pc, #360]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0a6      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3a:	4b54      	ldr	r3, [pc, #336]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d115      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e09a      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d52:	4b4e      	ldr	r3, [pc, #312]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e08e      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e086      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f023 0203 	bic.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4943      	ldr	r1, [pc, #268]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe f9e0 	bl	8001148 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8c:	f7fe f9dc 	bl	8001148 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e06e      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 020c 	and.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1eb      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d208      	bcs.n	8002de2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	492b      	ldr	r1, [pc, #172]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d210      	bcs.n	8002e12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	4923      	ldr	r1, [pc, #140]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_RCC_ClockConfig+0x1ec>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e036      	b.n	8002e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4918      	ldr	r1, [pc, #96]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4910      	ldr	r1, [pc, #64]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e50:	f000 f824 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	490b      	ldr	r1, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1f4>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	4a09      	ldr	r2, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002e6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1fc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f917 	bl	80010a8 <HAL_InitTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	08003a5c 	.word	0x08003a5c
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11e      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ed0:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ef8:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e004      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d134      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0xac>
 8002f40:	e005      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_GetSysClockFreq+0x110>)
 8002f44:	617b      	str	r3, [r7, #20]
      break;
 8002f46:	e005      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4a:	617b      	str	r3, [r7, #20]
      break;
 8002f4c:	e002      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	617b      	str	r3, [r7, #20]
      break;
 8002f52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	3301      	adds	r3, #1
 8002f60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0e5b      	lsrs	r3, r3, #25
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	3301      	adds	r3, #1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f94:	69bb      	ldr	r3, [r7, #24]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08003a6c 	.word	0x08003a6c
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fcc:	f7ff fa26 	bl	800241c <HAL_PWREx_GetVoltageRange>
 8002fd0:	6178      	str	r0, [r7, #20]
 8002fd2:	e014      	b.n	8002ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fec:	f7ff fa16 	bl	800241c <HAL_PWREx_GetVoltageRange>
 8002ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003004:	d10b      	bne.n	800301e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d919      	bls.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2ba0      	cmp	r3, #160	; 0xa0
 8003010:	d902      	bls.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003012:	2302      	movs	r3, #2
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e013      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	e010      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d902      	bls.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003024:	2303      	movs	r3, #3
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	e00a      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d102      	bne.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003030:	2302      	movs	r3, #2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	e004      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b70      	cmp	r3, #112	; 0x70
 800303a:	d101      	bne.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800303c:	2301      	movs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 0207 	bic.w	r2, r3, #7
 8003048:	4909      	ldr	r1, [pc, #36]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d001      	beq.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800307c:	2300      	movs	r3, #0
 800307e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003080:	2300      	movs	r3, #0
 8003082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	2b00      	cmp	r3, #0
 800308e:	d041      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003098:	d02a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800309a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800309e:	d824      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030aa:	d81e      	bhi.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b4:	d010      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030b6:	e018      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b8:	4b86      	ldr	r3, [pc, #536]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a85      	ldr	r2, [pc, #532]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c4:	e015      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fabb 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d6:	e00c      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3320      	adds	r3, #32
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fba6 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e8:	e003      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	74fb      	strb	r3, [r7, #19]
      break;
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003106:	4973      	ldr	r1, [pc, #460]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800310e:	e001      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d041      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003124:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003128:	d02a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800312a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800312e:	d824      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800313a:	d81e      	bhi.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003146:	e018      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003148:	4b62      	ldr	r3, [pc, #392]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a61      	ldr	r2, [pc, #388]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003154:	e015      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa73 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003166:	e00c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb5e 	bl	8003830 <RCCEx_PLLSAI2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003178:	e003      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	74fb      	strb	r3, [r7, #19]
      break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003188:	4b52      	ldr	r3, [pc, #328]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	494f      	ldr	r1, [pc, #316]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800319e:	e001      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a0 	beq.w	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031c6:	2300      	movs	r3, #0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e8:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031f4:	f7fd ffa8 	bl	8001148 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031fa:	e009      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fc:	f7fd ffa4 	bl	8001148 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	74fb      	strb	r3, [r7, #19]
        break;
 800320e:	e005      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d15c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d019      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd ff63 	bl	8001148 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003284:	e00b      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fd ff5f 	bl	8001148 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d902      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	74fb      	strb	r3, [r7, #19]
            break;
 800329c:	e006      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ec      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ca:	e009      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
 80032d0:	e006      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e0:	7c7b      	ldrb	r3, [r7, #17]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	4a9d      	ldr	r2, [pc, #628]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032fe:	4b98      	ldr	r3, [pc, #608]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f023 0203 	bic.w	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4994      	ldr	r1, [pc, #592]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003320:	4b8f      	ldr	r3, [pc, #572]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f023 020c 	bic.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	498c      	ldr	r1, [pc, #560]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003342:	4b87      	ldr	r3, [pc, #540]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4983      	ldr	r1, [pc, #524]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003364:	4b7e      	ldr	r3, [pc, #504]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	497b      	ldr	r1, [pc, #492]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	4972      	ldr	r1, [pc, #456]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	496a      	ldr	r1, [pc, #424]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	4961      	ldr	r1, [pc, #388]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033ec:	4b5c      	ldr	r3, [pc, #368]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	4959      	ldr	r1, [pc, #356]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800340e:	4b54      	ldr	r3, [pc, #336]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	4950      	ldr	r1, [pc, #320]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	4948      	ldr	r1, [pc, #288]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	493f      	ldr	r1, [pc, #252]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d028      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003474:	4b3a      	ldr	r3, [pc, #232]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003492:	d106      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003494:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a31      	ldr	r2, [pc, #196]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800349e:	60d3      	str	r3, [r2, #12]
 80034a0:	e011      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034aa:	d10c      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8c8 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	491f      	ldr	r1, [pc, #124]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f0:	d106      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f2:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fc:	60d3      	str	r3, [r2, #12]
 80034fe:	e011      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003508:	d10c      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2101      	movs	r1, #1
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f899 	bl	8003648 <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4908      	ldr	r1, [pc, #32]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a02      	ldr	r2, [pc, #8]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	e014      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800356c:	d10c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3304      	adds	r3, #4
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f867 	bl	8003648 <RCCEx_PLLSAI1_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02f      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a2:	4928      	ldr	r1, [pc, #160]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f844 	bl	8003648 <RCCEx_PLLSAI1_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d014      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	74bb      	strb	r3, [r7, #18]
 80035ce:	e011      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3320      	adds	r3, #32
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f925 	bl	8003830 <RCCEx_PLLSAI2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ea:	7cfb      	ldrb	r3, [r7, #19]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360e:	490d      	ldr	r1, [pc, #52]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003632:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800363a:	7cbb      	ldrb	r3, [r7, #18]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003656:	4b75      	ldr	r3, [pc, #468]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d018      	beq.n	8003694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d10d      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
       ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
       ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d047      	beq.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	e044      	b.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d018      	beq.n	80036ce <RCCEx_PLLSAI1_Config+0x86>
 800369c:	2b03      	cmp	r3, #3
 800369e:	d825      	bhi.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d002      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x62>
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d009      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x74>
 80036a8:	e020      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11d      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ba:	e01a      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036bc:	4b5b      	ldr	r3, [pc, #364]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d116      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036cc:	e013      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ce:	4b57      	ldr	r3, [pc, #348]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ea:	e006      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e004      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f2:	bf00      	nop
 80036f4:	e002      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003702:	4b4a      	ldr	r3, [pc, #296]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	430b      	orrs	r3, r1
 8003718:	4944      	ldr	r1, [pc, #272]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d17d      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a40      	ldr	r2, [pc, #256]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fd fd0a 	bl	8001148 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fd06 	bl	8001148 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
        break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800374c:	4b37      	ldr	r3, [pc, #220]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ef      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d160      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d111      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	0211      	lsls	r1, r2, #8
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	0912      	lsrs	r2, r2, #4
 800377c:	0452      	lsls	r2, r2, #17
 800377e:	430a      	orrs	r2, r1
 8003780:	492a      	ldr	r1, [pc, #168]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
 8003786:	e027      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d112      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003796:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	0211      	lsls	r1, r2, #8
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6912      	ldr	r2, [r2, #16]
 80037a4:	0852      	lsrs	r2, r2, #1
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0552      	lsls	r2, r2, #21
 80037aa:	430a      	orrs	r2, r1
 80037ac:	491f      	ldr	r1, [pc, #124]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	610b      	str	r3, [r1, #16]
 80037b2:	e011      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6952      	ldr	r2, [r2, #20]
 80037ca:	0852      	lsrs	r2, r2, #1
 80037cc:	3a01      	subs	r2, #1
 80037ce:	0652      	lsls	r2, r2, #25
 80037d0:	430a      	orrs	r2, r1
 80037d2:	4916      	ldr	r1, [pc, #88]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e4:	f7fd fcb0 	bl	8001148 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fd fcac 	bl	8001148 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
          break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ef      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI2_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b3f      	ldr	r3, [pc, #252]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d167      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fc16 	bl	8001148 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003920:	f7fd fc12 	bl	8001148 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14a      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	491f      	ldr	r1, [pc, #124]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	4313      	orrs	r3, r2
 800396c:	614b      	str	r3, [r1, #20]
 800396e:	e011      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6892      	ldr	r2, [r2, #8]
 8003980:	0211      	lsls	r1, r2, #8
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6912      	ldr	r2, [r2, #16]
 8003986:	0852      	lsrs	r2, r2, #1
 8003988:	3a01      	subs	r2, #1
 800398a:	0652      	lsls	r2, r2, #25
 800398c:	430a      	orrs	r2, r1
 800398e:	4916      	ldr	r1, [pc, #88]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	4313      	orrs	r3, r2
 8003992:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd fbd2 	bl	8001148 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039a6:	e009      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a8:	f7fd fbce 	bl	8001148 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d902      	bls.n	80039bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ba:	e005      	b.n	80039c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4d0d      	ldr	r5, [pc, #52]	; (8003a24 <__libc_init_array+0x38>)
 80039f0:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	2600      	movs	r6, #0
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	4d0b      	ldr	r5, [pc, #44]	; (8003a2c <__libc_init_array+0x40>)
 80039fe:	4c0c      	ldr	r4, [pc, #48]	; (8003a30 <__libc_init_array+0x44>)
 8003a00:	f000 f820 	bl	8003a44 <_init>
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	2600      	movs	r6, #0
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003a9c 	.word	0x08003a9c
 8003a28:	08003a9c 	.word	0x08003a9c
 8003a2c:	08003a9c 	.word	0x08003a9c
 8003a30:	08003aa0 	.word	0x08003aa0

08003a34 <memset>:
 8003a34:	4402      	add	r2, r0
 8003a36:	4603      	mov	r3, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
